name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changed-python-files.outputs.all_changed_files }}
      cpp: ${{ steps.changed-cpp-files.outputs.all_changed_files }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: 🔍 Get python changed files
        id: changed-python-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*.py
            **/*.pyi

      - name: 🔍 Get cpp changed files
        id: changed-cpp-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*.c
            **/*.cpp
            **/*.h
            **/*.hpp

      - name: 📝 Debug Changed Files
        run: |
          echo "Python changed files:"
          echo "${{ steps.changed-python-files.outputs.all_changed_files }}"
          echo "C++ changed files:"
          echo "${{ steps.changed-cpp-files.outputs.all_changed_files }}"

  test:
    needs: changed-files
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8"]
    runs-on: ${{ matrix.os }}
    if: ${{ needs.changed-files.outputs.python != '' || needs.changed-files.outputs.cpp != '' }}
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6

      - name: 🔧 Install dependencies
        run: uv sync

      - name: ✨ Lint & Format Check
        run: |
          uv run ruff check ${{ needs.changed-files.outputs.python }}
          uv run ruff format --check ${{ needs.changed-files.outputs.python }}

      - name: 🧪 Run Tests
        run: |
          uv run pytest \
            --cov=nextcv \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml \
            --junitxml=pytest.xml \
            | tee pytest-coverage.txt

      - name: 📊 Coverage Comment (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request'
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

  cpp-check:
    needs: changed-files
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8"]
    runs-on: ${{ matrix.os }}
    if: ${{ needs.changed-files.outputs.cpp != '' }}
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6

      - name: 🔧 Install dependencies
        run: uv sync

      - name: 🛠️ Install Clang Tools (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format clang-tidy

      - name: 🛠️ Install Clang Tools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm
          brew install include-what-you-use
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: 🎨 Check C++ Format
        run: |
          clang-format --dry-run --Werror ${{ needs.changed-files.outputs.cpp }}

      - name: 🔍 Run clang-tidy
        run: |
          # Use the Makefile for consistent clang-tidy execution
          make tidy ${{ needs.changed-files.outputs.cpp }}

      - name: 🔨 Build C++ Examples
        run: |
          # Use Makefile for consistent build process
          make build
          # Run the example (if it exists)
          if [ -f "./build/examples/cpp_example" ]; then
            ./build/examples/cpp_example
          fi
