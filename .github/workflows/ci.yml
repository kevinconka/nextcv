name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changed-python-files.outputs.all_changed_files }}
      cpp: ${{ steps.changed-cpp-files.outputs.all_changed_files }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: 🔍 Get python changed files
        id: changed-python-files
        uses: tj-actions/changed-files@v47
        with:
          files: |
            **/*.py
            **/*.pyi

      - name: 🔍 Get cpp changed files
        id: changed-cpp-files
        uses: tj-actions/changed-files@v47
        with:
          files: |
            **/*.c
            **/*.cpp
            **/*.h
            **/*.hpp

      - name: 📝 Debug Changed Files
        run: |
          echo "Python changed files:"
          echo "${{ steps.changed-python-files.outputs.all_changed_files }}"
          echo "C++ changed files:"
          echo "${{ steps.changed-cpp-files.outputs.all_changed_files }}"

  python-checks:
    needs: changed-files
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9"]
        include:
          - os: ubuntu-latest
            setup-deps: |
              sudo apt-get update
              sudo apt-get install -y libeigen3-dev
          - os: macos-latest
            setup-deps: |
              brew install eigen
    runs-on: ${{ matrix.os }}
    if: ${{ needs.changed-files.outputs.python != '' || needs.changed-files.outputs.cpp != '' }}
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🔧 Install System Dependencies
        run: ${{ matrix.setup-deps }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: 🔧 Install Python Dependencies
        run: uv sync

      - name: ✨ Lint & Format Check
        run: |
          uv run ruff check ${{ needs.changed-files.outputs.python }}
          uv run ruff format --check ${{ needs.changed-files.outputs.python }}

      - name: 📝 Generate and Check Python Stubs
        run: |
          uv run make stubs
          git diff nextcv/_cpp/ || true
          git diff --exit-code nextcv/_cpp/ || (
            echo "::error::Python stubs are out of date. Run 'make stubs' and commit changes."
            exit 1
          )

      - name: 🧪 Run Tests
        run: |
          uv run pytest \
            --cov=nextcv \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml \
            --junitxml=pytest.xml \
            | tee pytest-coverage.txt

      - name: 📊 Coverage Comment (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'pull_request'
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

  cpp-checks:
    needs: changed-files
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9"]
        include:
          - os: ubuntu-latest
            setup-deps: |
              sudo apt-get update
              sudo apt-get install -y libeigen3-dev cmake
          - os: macos-latest
            setup-deps: |
              brew install eigen cmake

    runs-on: ${{ matrix.os }}
    if: ${{ needs.changed-files.outputs.cpp != '' }}
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🔧 Install System Dependencies
        run: ${{ matrix.setup-deps }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 🔧 Install Python Package
        run: |
          pip install .

      - name: 🔍 C++ Linting and Formatting
        uses: cpp-linter/cpp-linter-action@v2
        id: cpp-linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: "file" # Use .clang-format config file
          tidy-checks: | # Overrides Checks in .clang-tidy config file
            ${{ startsWith(matrix.os, 'macos') && '-bugprone-easily-swappable-parameters' || '' }}
          version: "21"
          ignore: "nextcv/_cpp/src/bindings/*|examples/*"
          database: "build/compile_commands.json" # Path to compile_commands.json
          # only 'update' a single comment in a pull request thread.
          thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
          no-lgtm: false

      - name: Fail fast if linting failed
        if: steps.cpp-linter.outputs.checks-failed > 0
        run: exit 1

      - name: 🧪 Test User C++ Project Integration
        run: |
          # Test user project that uses NextCV as a dependency
          cd examples

          # Build the example project
          mkdir build && cd build
          cmake ..
          make -j$(nproc)

          # Run the example
          ./cpp_example

          echo "✅ User C++ project integration test completed successfully!"

  status:
    name: overall
    needs: [python-checks, cpp-checks]
    runs-on: ubuntu-latest
    if: always() # run even if others are skipped/fail
    steps:
      - name: Decide overall result
        run: |
          fail=0
          # If a needed job ran and failed, mark failure
          [[ "${{ needs.python-checks.result }}" == "failure" ]] && fail=1
          [[ "${{ needs.cpp-checks.result }}" == "failure" ]] && fail=1

          if [ $fail -eq 1 ]; then
            echo "Some checks failed."
            exit 1
          else
            echo "All required checks passed or were skipped."
            exit 0
          fi
